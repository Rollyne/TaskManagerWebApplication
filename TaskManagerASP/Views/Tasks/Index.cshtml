
@model ICollection<TaskManagerASP.Models.TaskIndexViewModel>
@{
    
    ViewData["Title"] = "Tasks";
}
<h2>Tasks</h2>
@if (ViewData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@ViewData["ErrorMessage"].ToString()</div>
}

<div class="well">
    <div class="dropdown">
        <button class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown">
            Items per Page
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            @foreach (var amount in TaskManagerASP.Tools.Constants.AmountOfItemsPerPage)
            {
                <li>@Html.ActionLink(amount.ToString(), "Index", "Tasks", new { page = ViewData["CurrentPage"] })</li>
            }
        </ul>
    </div>
    <div class="well-sm">
        <form class="form-control" method="get" asp-controller="Tasks" asp-action="Index">
            Search By:
            @if (Context.Request.Query["header"] == "true")
            {
                <label class="checkbox-inline"><input type="checkbox" name="header" value="true" checked>Header</label>
            }
            else
            {
                <label class="checkbox-inline"><input type="checkbox" name="header" value="true">Header</label>
            }
            @if (Context.Request.Query["description"] == "true")
            {
                <label class="checkbox-inline"><input type="checkbox" name="description" value="true" checked>Description</label>
            }
            else
            {
                <label class="checkbox-inline"><input type="checkbox" name="description" value="true">Description</label>
            }

            

            <input type="text" name="search" value="@Context.Request.Query["search"]"/>
            <input type="submit" value="Search"/>
        </form>
    </div>
</div>
<ul>
    Order by
    <li>
        Header:
        @Html.ActionLink("", "Index", "Tasks", new {sort = TaskManagerASP.Tools.TaskOrderOptions.HeaderAsc}, new {@class = "glyphicon glyphicon-sort-by-alphabet"})
        @Html.ActionLink("", "Index", "Tasks", new {sort = TaskManagerASP.Tools.TaskOrderOptions.HeaderDesc}, new {@class = "glyphicon glyphicon-sort-by-alphabet-alt"})
    </li>
    <li>
        Description:
        @Html.ActionLink("", "Index", "Tasks", new { sort = TaskManagerASP.Tools.TaskOrderOptions.DescriptionAsc }, new { @class = "glyphicon glyphicon-sort-by-alphabet" })
        @Html.ActionLink("", "Index", "Tasks", new { sort = TaskManagerASP.Tools.TaskOrderOptions.DescriptionDesc }, new { @class = "glyphicon glyphicon-sort-by-alphabet-alt" })
    </li>
    <li>
        Required hours:
        @Html.ActionLink("", "Index", "Tasks", new { sort = TaskManagerASP.Tools.TaskOrderOptions.RequiredHoursAsc }, new { @class = "glyphicon glyphicon-sort-by-order" })
        @Html.ActionLink("", "Index", "Tasks", new { sort = TaskManagerASP.Tools.TaskOrderOptions.RequiredHoursDesc }, new { @class = "glyphicon glyphicon-sort-by-order-alt" })
    </li>
</ul>
@foreach(var item in Model)
    {
    <div class="panel panel-default">
        <div class="panel-body">
            <h3>Header</h3>
            
            @Html.LabelFor(m => item.Header)<br />
            @Html.DisplayFor(m => item.Header)
            <hr />
            @Html.LabelFor(m => item.RequiredHours)<br/>
            @Html.DisplayFor(m => item.RequiredHours)
            <hr />
            @Html.LabelFor(m => item.Description)<br />
            <small style="color: #aaa;">@Html.DisplayFor(m => item.Description)</small><br /><br />
            @Html.ActionLink("Details", "Details", "Tasks", new { id = item.Id}, new{ @class = "btn btn-info" })
            @Html.ActionLink("Edit", "Edit", "Tasks", new { id = item.Id}, new { @class = "btn btn-warning" })
            @Html.ActionLink("Delete", "Delete", "Tasks", new {id=item.Id }, new { @class = "btn btn-danger", type = "button" })
        </div>
    </div>
    }

<ul class="pagination">
    @for (int i = 1; i <= (int)ViewData["PagesAvaliable"]; i++)
    {
        if (i == (int)ViewData["CurrentPage"])
        {
            <li class="active">
                @Html.ActionLink(i.ToString(), "Index", "Tasks", new
           {
               header = Context.Request.Query["header"],
               description = Context.Request.Query["description"],
               search = Context.Request.Query["search"],
               sort = Context.Request.Query["sort"],
               page = i
           })
            </li>
        }
        else
        {
            <li>@Html.ActionLink(i.ToString(), "Index", "Tasks", new
           {
               header = Context.Request.Query["header"],
               description = Context.Request.Query["description"],
               search = Context.Request.Query["search"],
               sort = Context.Request.Query["sort"],
               page = i
           })</li>
        }

    }
</ul>
<a asp-controller="Tasks" asp-action="Create" ><button class="btn btn-primary">Create new task</button></a>

